{"version":3,"sources":["SortingAlgorithms/selectionSort.js","SortingAlgorithms/bubbleSort.js","SortingAlgorithms/insertionSort.js","SortingAlgorithms/mergeSort.js","sorting.js","App.js","serviceWorker.js","index.js"],"names":["selectionSort","array","originalArray","animations","i","length","minIndex","j","temp","push","selectionSortHelper","bubbleSort","bubbleSortHelper","insertionSort","insertionSortHelper","mergeSort","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","mergeHelper","SortingAlgo","props","state","min","max","random","this","randomInt","setState","arrayBar","document","getElementsByClassName","currentIndex","currentElement","minElement","setTimeout","style","backgroundColor","tempheight","height","updateUI","console","log","arrayBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","className","onClick","resetArray","map","value","idx","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83ed5025.chunk.js","sourcesContent":["function selectionSort(array) {\r\n    let animations = [];\r\n\r\n    let result = selectionSortHelper(array, animations);\r\n    return result;\r\n}\r\n\r\nfunction selectionSortHelper(originalArray, animations) {\r\n    for(let i=0; i<originalArray.length; i++)\r\n    {\r\n        let minIndex = i;\r\n        for(let j=i; j<originalArray.length; j++)\r\n        {\r\n            if(originalArray[minIndex] > originalArray[j])\r\n            {\r\n                minIndex = j;\r\n            }\r\n        }\r\n\r\n        let temp = originalArray[minIndex];\r\n        originalArray[minIndex] = originalArray[i];\r\n        originalArray[i] = temp;\r\n\r\n        animations.push([i, minIndex]);     //first for changing background color\r\n        animations.push([i, minIndex]);     //second for changing to initial color and change height\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport default selectionSort;","function bubbleSort(array) {\r\n    let animations = [];\r\n\r\n    let result = bubbleSortHelper(array, animations);\r\n    return result;\r\n}\r\n\r\nfunction bubbleSortHelper(originalArray, animations) {\r\n    for(let i=0; i<originalArray.length; i++)\r\n    {\r\n        for(let j=0; j<originalArray.length-1-i; j++)\r\n        {\r\n            if(originalArray[j] > originalArray[j+1])\r\n            {\r\n                let temp = originalArray[j];\r\n                originalArray[j] = originalArray[j+1];\r\n                originalArray[j+1] = temp;\r\n                        \r\n                animations.push([j, j+1]);     //first for changing background color\r\n                animations.push([j, j+1]);     //second for changing to initial color and change height\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport default bubbleSort;","function insertionSort(array) {\r\n    let animations = [];\r\n\r\n    let result = insertionSortHelper(array, animations);\r\n    return result;\r\n}\r\n\r\nfunction insertionSortHelper(originalArray, animations) {\r\n    for(let i=1; i<originalArray.length; i++)\r\n    {\r\n        let temp = originalArray[i];\r\n        let j = i-1;\r\n        while(j>=0 && originalArray[j] > temp)\r\n        {\r\n            animations.push([j, j+1]);     //first for changing background color\r\n            animations.push([j, j+1]);     //second for changing to initial color and change height\r\n            originalArray[j+1] = originalArray[j];\r\n            j--;\r\n        }\r\n\r\n        originalArray[j+1] = temp;\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport default insertionSort;","function mergeSort(array) {\r\n    let animations = [];\r\n    if (array.length <= 1) return array;\r\n    let auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n    let middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    mergeHelper(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction mergeHelper(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations,) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\nexport default mergeSort;","import React, {Component} from 'react';\r\nimport selectionSort from './SortingAlgorithms/selectionSort';\r\nimport bubbleSort from './SortingAlgorithms/bubbleSort';\r\nimport insertionSort from './SortingAlgorithms/insertionSort';\r\nimport mergeSort from './SortingAlgorithms/mergeSort';\r\nimport './sorting.css';\r\n\r\nconst SIZE_OF_ARRAY = 100;\r\nconst TIME_DELAY = 1000/SIZE_OF_ARRAY;\r\nconst PRIMARY_COLOR = '#6D83F2';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nclass SortingAlgo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          array: [],\r\n        };\r\n    }\r\n\r\n    randomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i=0; i<SIZE_OF_ARRAY; i++)\r\n        {\r\n            array.push(this.randomInt(100, 500));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    updateUI(animations) {\r\n        const arrayBar = document.getElementsByClassName('array-bar');\r\n\r\n        for(let i=0; i<animations.length; i++)\r\n        {\r\n            let currentIndex = animations[i][0];\r\n            let minIndex = animations[i][1];\r\n\r\n            let currentElement = arrayBar[currentIndex];\r\n            let minElement = arrayBar[minIndex];\r\n\r\n            if(i%2 === 0) {\r\n                setTimeout(() => {\r\n                    currentElement.style.backgroundColor = SECONDARY_COLOR;\r\n                    minElement.style.backgroundColor = SECONDARY_COLOR;\r\n                }, i * TIME_DELAY);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    let tempheight = currentElement.style.height;\r\n                    currentElement.style.height = minElement.style.height;\r\n                    minElement.style.height = `${tempheight}`;\r\n\r\n                    currentElement.style.backgroundColor = PRIMARY_COLOR;\r\n                    minElement.style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * TIME_DELAY);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectionSort() {\r\n        const {array} = this.state;\r\n        const animations = selectionSort(array);\r\n\r\n        this.updateUI(animations);\r\n    }\r\n\r\n    bubbleSort() {\r\n        const {array} = this.state;\r\n        const animations = bubbleSort(array);\r\n\r\n        this.updateUI(animations);\r\n    }\r\n\r\n    insertionSort() {\r\n        const {array} = this.state;\r\n        const animations = insertionSort(array);\r\n\r\n        this.updateUI(animations);\r\n    }\r\n\r\n    mergeSort() {\r\n        const {array} = this.state;\r\n        const animations = mergeSort(array);\r\n\r\n        console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, i * TIME_DELAY);\r\n            } else {\r\n                setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n                }, i * TIME_DELAY);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className=\"page-container\">\r\n                <h1>Sorting Algorithms</h1>\r\n                <div className=\"btn-group\">\r\n                    <button className=\"generate-array-btn\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n                    <button className=\"generate-array-btn\" onClick={() => this.selectionSort()}>Selection Sort</button>\r\n                    <button className=\"generate-array-btn\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                    <button className=\"generate-array-btn\" onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n                    <button className=\"generate-array-btn\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                </div>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                            backgroundColor: PRIMARY_COLOR,\r\n                            height: `${value}px`,\r\n                        }}></div>\r\n                    ))}\r\n                </div>\r\n                <h4 className=\"owner\">Created by Deep Godhani</h4>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingAlgo;","import React from 'react';\nimport SortingAlgo from './sorting'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingAlgo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}